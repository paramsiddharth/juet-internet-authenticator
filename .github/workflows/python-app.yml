name: Build and release desktop app

on:
  push:
    tags:
    - 'v*'

jobs:

  upload-release:

    runs-on: ubuntu-20.04
    needs: [build-linux, build-windows]

    steps:
    - uses: actions/checkout@v1
    - name: Create a new release
      id: create_release
      uses: actions/create-release@master
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Download artifacts
      uses: actions/download-artifact@v1
      with:
        name: uploads
    # - name: upload macos
    #   id: upload-macos 
    #   uses: actions/upload-release-asset@v1.0.1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: ./uploads/macos.zip
    #     asset_name: macos.zip
    #     asset_content_type: application/zip  
    - name: Upload Linux build
      id: upload-linux
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./uploads/juet-network-authenticator
        asset_name: juet-network-authenticator
        asset_content_type: application/octet-stream
    - name: Upload Windows build
      id: upload-windows
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./uploads/juet-network-authenticator.exe
        asset_name: juet-network-authenticator
        asset_content_type: application/octet-stream

  build-linux:

    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./desktop

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9.5'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f build-requirements.txt ]; then pip install -r build-requirements.txt; fi
    - name: Build executable binary
      run: |
        pyinstaller --add-data 'icons:icons' -wF -n juet-internet-authenticator app.py
    - name: Upload Linux artifact
      uses: actions/upload-artifact@v1
      with:
        name: build
        path: ./dist/juet-network-authenticator

  build-windows:

    runs-on: windows-2019
    defaults:
      run:
        working-directory: ./desktop

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9.5'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if exist requirements.txt pip install -r requirements.txt
        if exist build-requirements.txt pip install -r build-requirements.txt
    - name: Build executable binary
      run: |
        pyinstaller --add-data "icons:icons" -wF -n juet-internet-authenticator app.py
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v1
      with:
        name: build
        path: ./dist/juet-network-authenticator.exe

  # build-macos:

  #   runs-on: macOS-10.14

  #   strategy:
  #     matrix:
  #       node-version: [12.x]

  #   steps:
  #   - uses: actions/checkout@v1
  #   - name: Use Node.js ${{ matrix.node-version }}
  #     uses: actions/setup-node@v1
  #     with:
  #       node-version: ${{ matrix.node-version }}
  #   - name: npm install, build, and test
  #     run: |
  #       npm ci
  #       npm test
  #   - name: npm run build
  #     run: |
  #       npm run build
  #   - name: zip macos artifact
  #     run: |
  #       zip -r macos out 
  #   - name: upload macos artifact
  #     uses: actions/upload-artifact@v1
  #     with:
  #       name: uploads
  #       path: macos.zip                    
